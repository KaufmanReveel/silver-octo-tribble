# This is a basic workflow to help you get started with Actions

name: Get

import { fileURLToPath } from 'url';

import { DateTime } from 'luxon';
import { ManagementClient } from 'auth0';

async function getUserLoginStats(mgmtClient, startDateTime, endDateTime) {
  const users = {};
  const stats = {};
  let logs = [];
  let page = 0;
  do {
    logs = await mgmtClient.getLogs({
      q: `type:"s" AND date:[${startDateTime.toISO()} TO ${endDateTime.toISO()}]`,
      sort: 'date:1',
      fields: 'date,user_id',
      include_fields: true,
      per_page: 100,
      page,
    });
    for (const { date, user_id } of logs) {
      const dateTime = DateTime.fromISO(date);

      let user = users[user_id];
      if (!user) {
        user = await mgmtClient.getUser({ id: user_id });
        users[user_id] = user;
      }

      const statsKey = user?.email || user_id;
      const userStats = stats[statsKey] || {};
      userStats.loginCount = (userStats.loginCount || 0) + 1;
      userStats.minLoginDate = DateTime.min(userStats.minLoginDate || dateTime, dateTime);
      userStats.maxLoginDate = DateTime.max(userStats.maxLoginDate || dateTime, dateTime);

      stats[statsKey] = userStats;
    }
    page++;
  } while (logs.length > 0);

  return stats;
}

async function main() {
  const mgmtClient = new ManagementClient({
    domain: process.env.AUTH0_DOMAIN,
    clientId: process.env.AUTH0_CLIENT_ID,
    clientSecret: process.env.AUTH0_CLIENT_SECRET,
  });
  const now = DateTime.utc();
  const yesterday = now.minus({ days: 1 });
  const userLoginStats = await getUserLoginStats(mgmtClient, yesterday, now);
  console.log(JSON.stringify(userLoginStats, null, 2));
}

if (process.argv[1] === fileURLToPath(import.meta.url)) {
  main().catch((e) => {
    console.error(e);
    process.exit(1);
  });
}
